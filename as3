// server.js
const express = require("express");
const jwt = require("jsonwebtoken");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

const SECRET_KEY = "myrbacsecret";

// ===== Mock Users =====
const users = [
  { username: "admin1", password: "12345", role: "Admin" },
  { username: "mod1", password: "12345", role: "Moderator" },
  { username: "user1", password: "12345", role: "User" },
];

// ===== Middleware: Authenticate JWT =====
function authenticateToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  if (!authHeader)
    return res.status(401).json({ message: "Authorization header missing" });

  const token = authHeader.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Token missing" });

  jwt.verify(token, SECRET_KEY, (err, user) => {
    if (err) return res.status(403).json({ message: "Invalid or expired token" });
    req.user = user;
    next();
  });
}

// ===== Middleware: Authorize Roles =====
function authorizeRoles(...allowedRoles) {
  return (req, res, next) => {
    if (!req.user) return res.status(401).json({ message: "Unauthorized" });
    if (!allowedRoles.includes(req.user.role))
      return res.status(403).json({ message: "Forbidden: Access denied" });
    next();
  };
}

// ===== Routes =====

// Public route
app.get("/", (req, res) => {
  res.json({ message: "Welcome! Please login to access protected routes." });
});

// Login route
app.post("/login", (req, res) => {
  const { username, password } = req.body;
  const user = users.find((u) => u.username === username && u.password === password);

  if (!user) return res.status(401).json({ message: "Invalid credentials" });

  const token = jwt.sign(
    { username: user.username, role: user.role },
    SECRET_KEY,
    { expiresIn: "1h" }
  );

  res.json({ message: "Login successful", token, role: user.role });
});

// Admin route (only Admin)
app.get(
  "/admin",
  authenticateToken,
  authorizeRoles("Admin"),
  (req, res) => {
    res.json({ message: `Hello ${req.user.username}, welcome to the Admin dashboard.` });
  }
);

// Moderator route (Admin or Moderator)
app.get(
  "/moderator",
  authenticateToken,
  authorizeRoles("Admin", "Moderator"),
  (req, res) => {
    res.json({ message: `Hello ${req.user.username}, welcome to Moderator tools.` });
  }
);

// User route (all roles)
app.get(
  "/profile",
  authenticateToken,
  authorizeRoles("Admin", "Moderator", "User"),
  (req, res) => {
    res.json({ message: `Hello ${req.user.username}, this is your profile page.` });
  }
);

// Start server
const PORT = 3000;
app.listen(PORT, () => console.log(`RBAC server running at http://localhost:${PORT}`));
