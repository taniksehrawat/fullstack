// server.js
const express = require("express");
const jwt = require("jsonwebtoken");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

// Secret key for JWT (in production, store in environment variable)
const SECRET_KEY = "mysecretkey";

// Mock user data
const users = [
  { username: "tanik", password: "12345" },
  { username: "alice", password: "password" },
];

// ================= JWT Middleware =================
function authenticateToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  if (!authHeader)
    return res.status(401).json({ message: "Authorization header missing" });

  const token = authHeader.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Token missing" });

  jwt.verify(token, SECRET_KEY, (err, user) => {
    if (err) return res.status(403).json({ message: "Invalid or expired token" });
    req.user = user;
    next();
  });
}

// ================= Routes =================

// Public route: login
app.post("/login", (req, res) => {
  const { username, password } = req.body;

  const user = users.find((u) => u.username === username && u.password === password);
  if (!user) return res.status(401).json({ message: "Invalid credentials" });

  const token = jwt.sign({ username: user.username }, SECRET_KEY, { expiresIn: "1h" });
  res.json({ message: "Login successful", token });
});

// Protected route
app.get("/protected", authenticateToken, (req, res) => {
  res.json({
    message: `Hello ${req.user.username}, you have accessed a protected route!`,
  });
});

// Public route for testing
app.get("/public", (req, res) => {
  res.json({ message: "This is a public route. Anyone can access it." });
});

// Start server
const PORT = 3000;
app.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));
