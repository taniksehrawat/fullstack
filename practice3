// account-transfer-system.js

const express = require("express");
const mongoose = require("mongoose");

const app = express();
app.use(express.json());

// ====== MongoDB Connection ======
mongoose
  .connect("mongodb://127.0.0.1:27017/bankdb", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("✅ MongoDB connected"))
  .catch((err) => console.error("❌ MongoDB connection error:", err));

// ====== Account Schema ======
const accountSchema = new mongoose.Schema({
  name: { type: String, required: true, unique: true },
  balance: { type: Number, required: true, min: 0 },
});

const Account = mongoose.model("Account", accountSchema);

// ====== Transfer Endpoint ======
app.post("/transfer", async (req, res) => {
  const { from, to, amount } = req.body;

  if (!from || !to || !amount || amount <= 0) {
    return res.status(400).json({ message: "Invalid transfer data" });
  }

  try {
    // Step 1: Validate sender and receiver
    const sender = await Account.findOne({ name: from });
    const receiver = await Account.findOne({ name: to });

    if (!sender) return res.status(404).json({ message: "Sender account not found" });
    if (!receiver) return res.status(404).json({ message: "Receiver account not found" });

    // Step 2: Check balance
    if (sender.balance < amount) {
      return res.status(400).json({ message: "Insufficient balance" });
    }

    // Step 3: Deduct from sender
    sender.balance -= amount;
    await sender.save();

    // Step 4: Credit to receiver
    receiver.balance += amount;
    await receiver.save();

    res.json({
      message: `Transfer of ₹${amount} from ${from} to ${to} successful`,
      senderNewBalance: sender.balance,
      receiverNewBalance: receiver.balance,
    });
  } catch (err) {
    console.error("Transfer error:", err);
    res.status(500).json({ message: "Server error during transfer" });
  }
});

// ====== Seed Sample Users ======
app.post("/seed", async (req, res) => {
  await Account.deleteMany({});

  const users = [
    { name: "Tanik", balance: 1000 },
    { name: "Abhi", balance: 500 },
    { name: "Ravi", balance: 0 },
  ];

  await Account.insertMany(users);
  res.json({ message: "Sample users created", users });
});

// ====== View All Accounts ======
app.get("/accounts", async (req, res) => {
  const accounts = await Account.find();
  res.json(accounts);
});

// ====== Start Server ======
const PORT = 3000;
app.listen(PORT, () => console.log(`🚀 Server running on http://localhost:${PORT}`));
